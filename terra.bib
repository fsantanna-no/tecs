@MISC{Memsic2009b,
  author = {Memsic},
  title = {MicaZ datasheet},
  howpublished = {Product folder},
  year = {2009},
  file = {Crossbow2004.pdf:Crossbow2004.pdf:PDF},
  url = {http://www.memsic.com/userfiles/files/Datasheets/WSN/micaz\_datasheet-t.pdf [August 2014]}
}

 @MISC{Memsic2009,
  author = {Memsic},
  title = {TelosB datasheet},
  howpublished = {Product folder},
  year = {2009},
  file = {Memsic2009.pdf:Memsic2009.pdf:PDF},
  url = {http://www.memsic.com/products/wireless-sensor-networks/wireless-modules.html}
}
@ARTICLE{Branco2015a,
  author = {Branco, Adriano and Sant'anna, Francisco and Ierusalimschy, Roberto
	and Rodriguez, Noemi and Rossetto, Silvana},
  title = {Terra: Flexibility and safety in {Wireless Sensor Networks}},
  journal = {ACM Transactions on Sensor Networks},
  year = {2015},
  volume = {11},
  pages = {59:1--59:27},
  number = {4},
  month = sep,
  abstract = {Terra is a system for programming wireless sensor network (WSN) applications.
	It combines the use of configurable virtual machines with a reactive
	scripting language that can be statically analyzed to avoid unbounded
	execution and memory conflicts. This approach allows the flexibility
	of remotely uploading code on motes to be combined with a set of
	guarantees for the programmer. The choice of the specific set of
	components in a virtual machine configuration defines the abstraction
	level seen by the application script. We describe a specific component
	library built for Terra, which we designed taking into account the
	functionality commonly needed in WSN applicationsâ€”typically for sense
	and control. We also discuss the programming environment resulting
	from the combination of a statically analyzable scripting language
	with this library of components. Finally, we evaluate Terra by measuring
	its overhead in a basic application and discussing its use and cost
	in a typical monitoring WSN scenario.},
  acmid = {2811267},
  address = {New York, NY, USA},
  articleno = {59},
  doi = {10.1145/2811267},
  issn = {1550-4859},
  issue_date = {September 2015},
  keywords = {WSN, reactive programming, safety, virtual machine, wireless sensor
	networks},
  numpages = {27},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/2811267}
}

@ARTICLE{Gay2003,
  author = {Gay, David and Levis, Philip and von Behren, Robert and Welsh, Matt
	and Brewer, Eric and Culler, David},
  title = {The {nesC} language: A holistic approach to networked embedded systems},
  year = {2003},
  pages = {1--11},
  abstract = {We present nesC, a programming language for networked embedded systems
	that represent a new design space for application developers. An
	example of a networked embedded system is a sensor network, which
	consists of (potentially) thousands of tiny, low-power "motes," each
	of which execute concurrent, reactive programs that must operate
	with severe memory and power constraints.nesC's contribution is to
	support the special needs of this domain by exposing a programming
	model that incorporates event-driven execution, a flexible concurrency
	model, and component-oriented application design. Restrictions on
	the programming model allow the nesC compiler to perform whole-program
	analyses, including data-race detection (which improves reliability)
	and aggressive function inlining (which reduces resource consumption).nesC
	has been used to implement TinyOS, a small operating system for sensor
	networks, as well as several significant sensor applications. nesC
	and TinyOS have been adopted by a large number of sensor network
	research groups, and our experience and evaluation of the language
	shows that it is effective at supporting the complex, concurrent
	programming style demanded by this new class of deeply networked
	systems.},
  address = {New York, NY, USA},
  booktitle = {PLDI '03: Proceedings of the ACM SIGPLAN 2003 conference on Programming
	language design and implementation},
  doi = {http://doi.acm.org/10.1145/781131.781133},
  file = {Gay2003.pdf:Gay2003.pdf:PDF},
  isbn = {1-58113-662-5},
  location = {San Diego, California, USA},
  publisher = {ACM}
}

@INPROCEEDINGS{Levis2004,
  author = {P. Levis and S. Madden and J. Polastre and R. Szewczyk and K. Whitehouse
	and A. Woo and D. Gay and J. Hill and M. Welsh and E. Brewer and
	D. Culler},
  title = {{TinyOS}: An operating system for sensor networks},
  booktitle = {Ambient Intelligence},
  year = {2004},
  publisher = {Springer Verlag},
  abstract = {We present TinyOS, a flexible, application-specific operating system
	for sensor networks, which form a core component of ambient intelligence
	systems. Sensor networks consist of (potentially) thousands of tiny,
	low-power nodes, each of which execute concurrent, reactive programs
	that must operate with severe memory and power constraints. The sensor
	network challenges of limited resources, event-centric concurrent
	applications, and low-power operation drive the design of TinyOS.
	Our solution combines flexible, fine-grain components with an execution
	model that supports complex yet safe concurrent operations. TinyOS
	meets these challenges well and has become the platform of choice
	for sensor network research; it is in use by over a hundred groups
	worldwide, and supports a broad range of applications and research
	topics. We provide a qualitative and quantitative evaluation of the
	system, showing that it supports complex, concurrent programs with
	very low memory requirements (many applications fit within 16KB of
	memory, and the core OS is 400 bytes) and efficient, low-power operation.
	We present our experiences with TinyOS as a platform for sensor network
	innovation and applications.},
  file = {Levis2004.pdf:Levis2004.pdf:PDF}
}


